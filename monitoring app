      scan_requirements_file_only: 'true'

    - name: Test with pytest
      run: |
        pytest
      run: python -m pytest --import-mode=append tests/


import unittest

import mysql
import configparser

from app.database.DatabaseConnection import DatabaseConnection
from unittest.mock import MagicMock


class TestDatabaseCase(unittest.TestCase):
    def test_connection(self):
        with unittest.mock.patch.dict(DatabaseConnection.config, {
            'dbconnection':
                {
                    'host': '',
                    'database': '',
                    'user': '',
                    'port': 0,
                    'password': ''
                 }
        }):
            mysql.connector.connect = MagicMock()
            DatabaseConnection()
            mysql.connector.connect.assert_called()


if __name__ == '__main__':
    unittest.main()

import unittest
from smtplib import SMTP

from app.mail.WarningMail import WarningMail
from unittest.mock import MagicMock


class TestMailCase(unittest.TestCase):
    def test_connection(self):
        WarningMail.send_mail = MagicMock()

        mail = WarningMail()
        mail.send_mail('', '')

        WarningMail.send_mail.assert_called()


if __name__ == '__main__':
    unittest.main()

import unittest
import app.webserver.server


class TestWebserverCase(unittest.TestCase):
    def test_server(self):
        with app.webserver.server.create_app().test_client() as client:
            up_page = client.get('/status')
            html = up_page.data.decode()
            self.assertEqual(200, up_page.status_code)
            assert 'up!' in html



if __name__ == '__main__':
    unittest.main()
